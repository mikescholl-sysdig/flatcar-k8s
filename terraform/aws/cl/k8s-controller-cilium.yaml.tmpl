---
storage:
  files:
    - path: /etc/cloud-controller-aws-values.yaml
      filesystem: root
      mode: 0755
      contents: 
        inline: |
          args:
            - --v=2
            - --cloud-provider=aws
            - --cluster-name=${cluster_name}
            - --cluster-cidr=192.168.0.0/16
            - --allocate-node-cidrs=true
            - --configure-cloud-routes=false
          resources:
             limits:
               cpu: 500m
               memory: 512Mi
             requests:
               cpu: 200m
               memory: 512Mi
    - path: /opt/bin/k8s-setup.sh
      filesystem: root
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOF
          sudo modprobe overlay
          sudo modprobe br_netfilter
          # sysctl params required by setup, params persist across reboots
          cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF
          
          # Apply sysctl params without reboot
          sudo sysctl --system

          ## Download required binaries and start kubelet
          CNI_VERSION="${cni_version}"
          CRICTL_VERSION="${crictl_version}"
          RELEASE_VERSION="${release_version}"
          DOWNLOAD_DIR=${download_dir}
          RELEASE="$(curl -sSL https://dl.k8s.io/release/stable.txt)"

          mkdir -p /opt/cni/bin
          mkdir -p /etc/systemd/system/kubelet.service.d

          curl -sSL "https://github.com/containernetworking/plugins/releases/download/$${CNI_VERSION}/cni-plugins-linux-amd64-$${CNI_VERSION}.tgz" | tar -C /opt/cni/bin -xz
          curl -sSL "https://github.com/kubernetes-sigs/cri-tools/releases/download/$${CRICTL_VERSION}/crictl-$${CRICTL_VERSION}-linux-amd64.tar.gz" | tar -C $${DOWNLOAD_DIR} -xz
          curl -sSL "https://raw.githubusercontent.com/kubernetes/release/$${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service" | sed "s:/usr/bin:$${DOWNLOAD_DIR}:g" | tee /etc/systemd/system/kubelet.service
          curl -sSL "https://raw.githubusercontent.com/kubernetes/release/$${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf" | sed "s:/usr/bin:$${DOWNLOAD_DIR}:g" | tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
          curl -sSL --remote-name-all https://storage.googleapis.com/kubernetes-release/release/$${RELEASE}/bin/linux/amd64/{kubeadm,kubelet,kubectl}

          chmod +x {kubeadm,kubelet,kubectl}
          mv {kubeadm,kubelet,kubectl} $${DOWNLOAD_DIR}/

          systemctl enable --now kubelet
          systemctl status kubelet

          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          export HELM_INSTALL_DIR=/opt/bin
          ./get_helm.sh


          ## Initialize Kubeadm
          PATH=$(echo $PATH:/opt/bin:/opt/cni/bin)

          HOSTNAME_LONG=$(hostname -f)
          hostname $(echo $HOSTNAME_LONG)
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
          AZ=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/placement/availability-zone)
          INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)

          ### Get public hostname 
          PUBLIC_HOSTNAME=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/public-hostname)
          PRIVATE_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/local-ipv4)
          
          
          cat <<EOF | tee kubeadm-config.yaml
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: InitConfiguration
          nodeRegistration:
            name: "$${HOSTNAME_LONG}"
            kubeletExtraArgs:
              volume-plugin-dir: "/opt/libexec/kubernetes/kubelet-plugins/volume/exec/"
              cloud-provider: aws
              provider-id: aws://$${AZ}/$${INSTANCE_ID}
            taints:
              - key: "node.cilium.io/agent-not-ready"
                effect: "NoSchedule"
          ---
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          networking:
            podSubnet: 192.168.0.0/16
            serviceSubnet: 10.96.0.0/12
          clusterName: ${cluster_name}
          controllerManager:
            extraArgs:
              flex-volume-plugin-dir: "/opt/libexec/kubernetes/kubelet-plugins/volume/exec/"
              cloud-provider: "external"
          apiServer:
            certSANs:
              - $${PUBLIC_HOSTNAME}
            extraArgs:
              cloud-provider: "external"
          EOF

          kubeadm config images pull
          
          ###KUBELET_KUBEADM_ARGS="--register-with-taints=\"node.cilium.io/agent-not-ready=NoSchedule\""
          kubeadm init --config kubeadm-config.yaml

          sleep 60

          mkdir -p $HOME/.kube
          cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
          mkdir -p /home/core/.kube
          cp -i /etc/kubernetes/admin.conf /home/core/.kube/config
          chmod 0755 /home/core/.kube/config

          ## Replace private IP in kubeconfig to public dns address
          sed -i "s|$${PRIVATE_IP}|$${PUBLIC_HOSTNAME}|g" /home/core/.kube/config

          ## Install CNI and other add-ons

          KUBECONFIG=/etc/kubernetes/admin.conf
          helm repo add cilium https://helm.cilium.io/
          helm repo add aws-cloud-controller-manager https://kubernetes.github.io/cloud-provider-aws
          helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver
          helm repo update
          helm install cilium cilium/cilium --namespace kube-system --version 1.11.6 --set ipam.mode=kubernetes

          git clone https://github.com/frezbo/cloud-provider-aws.git /etc/cloud-provider-aws
          cd /etc/cloud-provider-aws
          git checkout chore/add-k8s-1.24-taints
          cd /

          helm install aws-cloud-controller-manager /etc/cloud-provider-aws/charts/aws-cloud-controller-manager -n kube-system -f /etc/cloud-controller-aws-values.yaml
          helm upgrade --install aws-ebs-csi-driver --namespace kube-system aws-ebs-csi-driver/aws-ebs-csi-driver --set node.tolerateAllTaints=true --set controller.tolerations[0].key="node-role\.kubernetes\.io/control-plane",controller.tolerations[0].operator=Exists

          ### Set parameter for install command ###
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -qq awscliv2.zip
          ./aws/install --install-dir /opt/bin/aws-cli --bin-dir /opt/bin

          JOIN_COMMAND=$(kubeadm token create --print-join-command --ttl 0)
          CLUSTER_CA_HASH=$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')
          CLUSTER_ENDPOINT="$(hostname -f):6443"
          CLUSTER_TOKEN=$(kubeadm token create --ttl 0)
          aws ssm put-parameter --name ${cluster_name}-ca-hash --value "$${CLUSTER_CA_HASH}" --type String --overwrite
          aws ssm put-parameter --name ${cluster_name}-endpoint --value "$${CLUSTER_ENDPOINT}" --type String --overwrite
          aws ssm put-parameter --name ${cluster_name}-token --value "$${CLUSTER_TOKEN}" --type String --overwrite
          aws ssm put-parameter --name ${cluster_name}-join --value "$${JOIN_COMMAND}" --type String --overwrite

systemd:
  units:
  - name: containerd.service
    enabled: true
  - name: k8s-setup.service
    enabled: true
    contents: |
      [Unit]
      User=root
      Wants=containerd.service network-online.target
      After=network-online.target containerd.service
      Description="Run K8S Controller Bootstrap script"
      ConditionPathExists=/opt/bin/k8s-setup.sh
      [Service]
      Type=forking
      TimeoutStartSec=180
      RemainAfterExit=yes
      KillMode=process
      ExecStart=/usr/bin/sh -c "/opt/bin/k8s-setup.sh"
      [Install]
      WantedBy=multi-user.target